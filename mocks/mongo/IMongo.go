// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	proto "github.com/cimartinez3/DEUNA/bank/proto"

	types "github.com/cimartinez3/DEUNA/bank/types"
)

// IMongo is an autogenerated mock type for the IMongo type
type IMongo struct {
	mock.Mock
}

// CreateCharge provides a mock function with given fields: ctx, req
func (_m *IMongo) CreateCharge(ctx context.Context, req *proto.TransactionRequest) primitive.ObjectID {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateCharge")
	}

	var r0 primitive.ObjectID
	if rf, ok := ret.Get(0).(func(context.Context, *proto.TransactionRequest) primitive.ObjectID); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(primitive.ObjectID)
		}
	}

	return r0
}

// CreateCustomer provides a mock function with given fields: ctx, req
func (_m *IMongo) CreateCustomer(ctx context.Context, req *proto.TransactionRequest) primitive.ObjectID {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomer")
	}

	var r0 primitive.ObjectID
	if rf, ok := ret.Get(0).(func(context.Context, *proto.TransactionRequest) primitive.ObjectID); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(primitive.ObjectID)
		}
	}

	return r0
}

// GetCustomer provides a mock function with given fields: ctx, request, customerItem
func (_m *IMongo) GetCustomer(ctx context.Context, request *proto.TransactionRequest, customerItem *types.CustomerItem) error {
	ret := _m.Called(ctx, request, customerItem)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.TransactionRequest, *types.CustomerItem) error); ok {
		r0 = rf(ctx, request, customerItem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMerchant provides a mock function with given fields: ctx, request, merchantItem
func (_m *IMongo) GetMerchant(ctx context.Context, request *proto.TransactionRequest, merchantItem *types.Merchant) error {
	ret := _m.Called(ctx, request, merchantItem)

	if len(ret) == 0 {
		panic("no return value specified for GetMerchant")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.TransactionRequest, *types.Merchant) error); ok {
		r0 = rf(ctx, request, merchantItem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTransaction provides a mock function with given fields: ctx, id, charge
func (_m *IMongo) GetTransaction(ctx context.Context, id string, charge *types.Charge) error {
	ret := _m.Called(ctx, id, charge)

	if len(ret) == 0 {
		panic("no return value specified for GetTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *types.Charge) error); ok {
		r0 = rf(ctx, id, charge)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefundAmounts provides a mock function with given fields: ctx, charge
func (_m *IMongo) RefundAmounts(ctx context.Context, charge *types.Charge) error {
	ret := _m.Called(ctx, charge)

	if len(ret) == 0 {
		panic("no return value specified for RefundAmounts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Charge) error); ok {
		r0 = rf(ctx, charge)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCustomerBalance provides a mock function with given fields: ctx, request, customer
func (_m *IMongo) UpdateCustomerBalance(ctx context.Context, request *proto.TransactionRequest, customer *types.CustomerItem) error {
	ret := _m.Called(ctx, request, customer)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCustomerBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.TransactionRequest, *types.CustomerItem) error); ok {
		r0 = rf(ctx, request, customer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMerchantBalance provides a mock function with given fields: ctx, request, merchant
func (_m *IMongo) UpdateMerchantBalance(ctx context.Context, request *proto.TransactionRequest, merchant *types.Merchant) error {
	ret := _m.Called(ctx, request, merchant)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMerchantBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.TransactionRequest, *types.Merchant) error); ok {
		r0 = rf(ctx, request, merchant)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIMongo creates a new instance of IMongo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIMongo(t interface {
	mock.TestingT
	Cleanup(func())
}) *IMongo {
	mock := &IMongo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
